Git  :is an Open Source Tool for collaborations(Sofware, piece of code)
Git Hub : is a common location where all repo Exists

Repository : Local and Remote
 step 1 : create a local repo(git init)
 Step 2 : create a remote repo (by creating an account in github.com)
 step 3 : next sync both the local and the rmote repo
		- copy the URL (https) of the remote repo and type the below command in the command prompt 
		- git remote add <alias name for the remote repo> followed by <remote repo url>
		- One local repo can have only one Remote Repo at any given point of time
 Step 4: Add the files that are tequired to be pushed into remote (git add .)
 Step 5: Commit the added files by typing git commit -m" <meaningful name for the commit">
 Step 6: To push it to remote (git push origin master)
Step 7: To get the latest info from the remote (git pull origin master)

 Step 4 to 7 is a repeat


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

CSharp : is a modern, general purpose object oriented programming lang. developed by Microsoft
Was developed by Anders Hejlsberg and his team during the development of .Net Framework
- is designed for common language infrastructure(CLI) which consists of executable code and runtime environment that allows use of varoius high level lang. on different computer platforms with different OS

Namespace : is a logical way to  organize our programs 
		provides assistance in avoiding name clashes
		It is a collection Of Classes, Interfaces, Events, Delegates, Structures, Enums and also other namespaces



namespace Day2_DotNet
{
class Program
{
static void Main(string[] args)
{
console.writeLine("P1ease Enter Your First Name
string fname=Cons01e. ReadLine();
//ConsoIe.WriteLine("Your Name is " + fname); // Concatenation
//Cons01e.WriteLine("Your Name is , fname) ;//placeholder
//MultipIe Placeholder example to display data
Console.WriteLine("Enter your Last Name:
string Iname = Console.ReadLine();
Console.WriteLine("Your First Name is and your Last name is :{l}",fname,lname);
// string interpolation to display data
Console. FirstName is {fname} and your lastName is {Iname}");
Myclass. MyFunction() ;
Console. Read( ) ;
}
}
class Myclass
{
public static void MyFunction()
{
Console.WriteLine("We are discussing Main Function");
// Console. Read();
}
}
}


Object Oriented Approach :
All executable piece of code has to be inside a function only.
- All fucntions have to be inside a class only and cannot lie outside a class including Main function() which is thw entry point of the application
- functions that need to be executed, have to be called within the Main Function()




.....................
- Value Types : All integral/primitive/fundamental/systemic data types( int,char,float,decimal etc..)
-Value types hold values directly
- are stored in stack memory
E.g.: int x = 10;
Reference Types : All Arrays, objects of classes, interface,delegates etc.
- Reference types will only hold the reference/ location of a
place where the value is
- Reference types are stored in Heap Memory

e.g.: 1

string str;
str ="hey";

2.

class c {
	public void NewFunc(){
....
 }
public static void Main()
 {
c obj = new c();
obj.NewFunc();
 }
}

string = mult. of characters
Literals in C#

String Literals - characters
Integar Literals  -  whole numbers 
Real Literals - Numbers & Decimals
Null Literals - Special type
Character Literals - single character 
Boolean Literals - True/False




Operators : 
Unary - One Operand ptr++ = ptr = ptr + 1
Binary - 2 operands a + b
Ternary - 3 operands (one to validate, 2 and 3 to agree or disagree on the validation)
x = 5;
if(x > 5) then good
else bad






Any Function
- will have to have a name
- will have a return type
May or may not take parameters/arguments
- All functions by default will have only one return type
All the above put together is termed as function signature

All the above put together is termed as function signature
Conversions and Typecastings :
- Implicit]
Explicit

Conversions and Typecastings:
- Implicit : Compiler converts automatically ( from lower
datatype to higher type)
Explicit : Compiler does not convert and expects the
developer to explicitly convert using
[0]
typecasting
- or conversion functions (using Convert class functions)



All the above put together is termed as function signature
Conversions and Typecastings: 1) within value type*
- Implicit : Compiler converts automatically ( frbm lower
datatype to higher type)
Explicit : Compiler does not convert and expects the
developer to explicitly convert using
[0]
typecasting
- or conversion functions (using Convert class functions)
2) Between Reference Types or with Value and reference
type sl




Conversions and Typecastings: 1) within value types
- Implicit : Compiler converts automatically ( from lower
datatype to higher type)
Explicit : Compiler does not convert and expects the
developer to explicitly convert using
[0]
- typecasting
- or conversion functions (using Convert class functions)
2) Between Reference Types or between Value and reference
types

2) Between Reference Types or between Value and reference
types
reference to reference = implicit
value to reference type
boxing
reference to value type
â€” unboxing



Nullable Concept
- All reference types are nullable by default
- All value types are not nullable by default

Nullable Types : Where a value type is made,a nullable type to symbol assign null values using '?' symbol
Nullcoalescing operator : ?? which works like a ternary
operator to deal with null values


// Class Methods and Instance Methods

Class consists of
	- Functions / Methods / Member functions
	- Fields / Data Members